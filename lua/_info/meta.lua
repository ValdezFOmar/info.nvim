---@meta
error 'cannot require a meta file'

---@class info.parser.Position
---@field start integer
---@field end_ integer

---@class info.parser.TextPosition : info.parser.Position
---@field text string

---@class info.parser.Header.Pair : info.parser.Position
---@field value info.parser.TextPosition

---@class info.parser.Element : info.parser.Position
---@field type info.Element

---@class info.parser.Heading : info.parser.Element
---@field level 1|2|3|4

---@class info.parser.Reference : info.parser.Element
---@field label info.parser.TextPosition
---@field target? info.parser.TextPosition
---@field line? integer

---@class info.parser.Header
---@field file info.parser.Header.Pair
---@field node info.parser.Header.Pair
---@field next? info.parser.Header.Pair
---@field prev? info.parser.Header.Pair
---@field up? info.parser.Header.Pair

---Captures generated by parsing the manual's content.
---@class info.parser.Captures
---@field header info.parser.Header
---@field elements info.parser.Element[]

---
--- Final result of parsing an Info manual's node
---

---@class info.doc.Header.Text
---@field range info.TextRange
---@field target { range: info.TextRange, text: string }

---@class info.doc.Header.Relation
---@field range info.TextRange
---@field target info.doc.Reference.Target

---@class info.doc.Header.Meta
---@field file info.doc.Header.Text
---@field node info.doc.Header.Text

---@class info.doc.Header.Relations
---@field next? info.doc.Header.Relation
---@field prev? info.doc.Header.Relation
---@field up? info.doc.Header.Relation

---@class info.doc.Header
---@field meta info.doc.Header.Meta
---@field relations info.doc.Header.Relations

---@class info.doc.Reference.Target
---@field file string
---@field node string
---@field line? number
---@field range? info.TextRange `nil` if a shorthand reference was used

---Cross-reference pointing to a manual's node.
---@class info.doc.Reference
---@field range info.TextRange
---@field label { range: info.TextRange, text: string }
---@field target info.doc.Reference.Target

---@class info.doc.Menu
---@field header? { range: info.TextRange }
---@field entries info.doc.Reference[]

---@class info.doc.Footnotes
---@field heading { range: info.TextRange }

---@class info.doc.Heading
---@field level 1|2|3|4
---@field range info.TextRange

---@class info.doc.Element
---@field type info.Element
---@field range info.TextRange

---All data necessary to highlight, render and navigate an Info manual.
---Elements' position is adjusted to rows/columns.
---@class info.doc.Document
---@field header info.doc.Header
---@field headings info.doc.Heading[]
---@field menu info.doc.Menu
---@field references info.doc.Reference[]
---@field footnotes? info.doc.Footnotes
---@field misc info.doc.Element[] Miscellaneous elements that only contain type and range information

---
--- Final manual data stored in `vim.b._info_manual`
---

---Position of a piece of text in a buffer.
---The format of `(start,end)_row` and `(start,end)_col` make it seamless to test if the cursor
---is contained withing the text using the returned value of `nvim_win_get_cursor()`.
---The range is end-inclusive to make is easier to use in Lua and with the extmarks API.
---@class info.TextRange
---@field start_row integer 1-indexed
---@field start_col integer 0-indexed
---@field end_row integer 1-indexed
---@field end_col integer 0-indexed

---@class info.Manual.Node
---@field file string
---@field node string

---@class info.Manual.XRef
---@field range info.TextRange
---@field label string
---@field file string
---@field node string
---@field line? number

---@class info.Manual.Relations
---@field next? info.Manual.Node
---@field prev? info.Manual.Node
---@field up? info.Manual.Node

---Data of an Info manual rendered in a buffer.
---@class info.Manual
---@field file string
---@field node string
---@field relations info.Manual.Relations
---@field xreferences info.Manual.XRef[]
---@field menu_entries info.Manual.XRef[]
